// src/commands/pedir/etapas/confirmarEndereco.js (CORRIGIDO)

const axios = require('axios');
const { estadosDeConversa } = require('@config/state');
const mensagens = require('@utils/mensagens'); // Importa mensagens para respostas

// URL da API do seu backend para pedidos e clientes
const BACKEND_API_URL = process.env.BACKEND_API_URL || 'http://localhost:3000/api'; // Certifique-se que esta vari치vel est치 no .env do BACKEND

// CORRE칂츾O: A ordem dos par칙metros deve ser (sock, msg, estado)
async function handleConfirmarEndereco(sock, msg, estado) {
  const userId = msg.key.remoteJid; // 'msg' agora 칠 o objeto de mensagem correto
  const clientName = msg.pushName || userId.split('@')[0];
  // CORRE칂츾O: Extrair o texto da mensagem de forma robusta
  const textoOriginal = msg.message?.conversation || msg.message?.extendedTextMessage?.text || '';
  const texto = textoOriginal.trim().toLowerCase();

  console.log(`[Confirmar Endere칞o] Processando para ${clientName} (${userId}). Etapa: '${estado.etapa}'. Mensagem: "${texto}"`);
  console.log('Dados do estado de confirma칞칚o de endere칞o:', JSON.stringify(estado.dados));

  // Fun칞칚o auxiliar para finalizar a conversa e enviar uma mensagem
  const finalizarConversa = async (messageText) => {
    try {
      await sock.sendMessage(userId, { text: messageText });
      console.log(`[Confirmar Endere칞o] Conversa finalizada para ${clientName} com mensagem: "${messageText}"`);
    } catch (sendError) {
      console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar mensagem de finaliza칞칚o para ${clientName}:`, sendError);
    } finally {
      estadosDeConversa.delete(userId); // Limpa o estado
    }
    return false; // Indica que o fluxo terminou
  };

  // Fun칞칚o auxiliar para enviar o pedido para o backend
  const enviarPedido = async () => {
    console.log(`[Confirmar Endere칞o] Tentando enviar pedido para o backend para ${clientName}.`);
    try {
      const clienteId = estado.cliente.id;

      if (!estado.dados.carrinho || estado.dados.carrinho.length === 0) {
        console.error(`游뚿 [Confirmar Endere칞o] Erro: Carrinho vazio ao tentar enviar o pedido para ${clientName}.`);
        return await finalizarConversa(mensagens.erros.carrinhoVazio || 'Erro interno: Seu pedido est치 vazio. Tente novamente mais tarde.');
      }

      // Mapeia os itens do carrinho para o formato esperado pela API de pedidos
      const itensDoPedido = estado.dados.carrinho.map(item => ({
        produtoId: item.produtoId,
        quantidade: parseInt(item.quantidade),
        // Recalcula subtotal final para garantir precis칚o
        subtotal: parseFloat(item.precoUnitario) * parseInt(item.quantidade)
      }));

      // CORRE칂츾O: Usar BACKEND_API_URL
      const response = await axios.post(`${BACKEND_API_URL}/pedidos`, {
        clienteId,
        observacao: estado.dados.observacao || '',
        status: 'PENDENTE', // Ou outro status inicial
        itens: itensDoPedido,
        total: estado.dados.totalPedido // Inclui o total do pedido
      });

      console.log(`[Confirmar Endere칞o] Pedido enviado com sucesso para o backend para ${clientName}. Resposta:`, response.data);

      // MUDAN칂A: Agora finaliza a conversa ap칩s o pedido completo
      return await finalizarConversa(mensagens.pedido.pedidoRecebidoConfirmado || 'Pedido recebido e confirmado! Agradecemos a prefer칡ncia 游땕');

    } catch (e) {
      console.error(`[Confirmar Endere칞o] ERRO ao enviar o pedido para ${clientName}:`, e.response?.data || e.message);
      let mensagemErro = mensagens.erros.erroInterno || 'Ocorreu um erro ao finalizar seu pedido. Tente novamente mais tarde.';
      if (e.response && e.response.data && e.response.data.erro) {
        mensagemErro = `Erro ao finalizar pedido: ${e.response.data.erro}`;
      }
      return await finalizarConversa(mensagemErro);
    }
  };

  // --- L칩gica para a etapa 'confirmar_endereco' ---
  if (estado.etapa === 'confirmar_endereco') {
    if (texto === 'sim') {
      console.log(`[Confirmar Endere칞o] Endere칞o confirmado por ${clientName}. Enviando pedido.`);
      return await enviarPedido();
    } else if (texto === 'n칚o' || texto === 'nao') {
      estado.etapa = 'aguardando_novo_endereco';
      try {
        await sock.sendMessage(userId, { text: mensagens.pedido.novoEnderecoPergunta || 'Ok. Por favor, digite seu novo endere칞o completo (Rua, N칰mero, Bairro, Cidade, CEP).' });
        console.log(`[Confirmar Endere칞o] Solicitando novo endere칞o para ${clientName}.`);
      } catch (sendError) {
        console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar 'novo endere칞o' para ${clientName}:`, sendError);
      }
      return true;
    } else {
      try {
        await sock.sendMessage(userId, { text: mensagens.pedido.respostaInvalidaEndereco || 'Por favor, responda "sim" ou "n칚o" sobre a confirma칞칚o do endere칞o.' });
        console.log(`[Confirmar Endere칞o] Resposta inv치lida de endere칞o de ${clientName}.`);
      } catch (sendError) {
        console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar 'resposta inv치lida' para ${clientName}:`, sendError);
      }
      return true;
    }
  }

  // --- L칩gica para a etapa 'aguardando_novo_endereco' ---
  if (estado.etapa === 'aguardando_novo_endereco') {
    const novoEndereco = textoOriginal.trim(); // Usar textoOriginal aqui para preservar a capitaliza칞칚o/formato
    if (novoEndereco.length < 5) { // Valida칞칚o b치sica
      try {
        await sock.sendMessage(userId, { text: mensagens.pedido.enderecoCurto || 'Endere칞o muito curto. Por favor, digite seu endere칞o completo.' });
        console.log(`[Confirmar Endere칞o] Endere칞o muito curto de ${clientName}.`);
      } catch (sendError) {
        console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar 'endere칞o curto' para ${clientName}:`, sendError);
      }
      return true;
    }

    try {
      // CORRE칂츾O: Usar BACKEND_API_URL
      await axios.put(`${BACKEND_API_URL}/clientes/${estado.cliente.id}`, {
        endereco: novoEndereco
      });

      estado.cliente.endereco = novoEndereco; // Atualiza o endere칞o no estado

      estado.etapa = 'aguardando_confirmacao_final_endereco';
      try {
        await sock.sendMessage(userId, { text: mensagens.pedido.enderecoAtualizadoSucesso || 'Endere칞o atualizado com sucesso!' });
        await sock.sendMessage(userId, {
          text: mensagens.pedido.confirmarNovoEnderecoPergunta || `Seu novo endere칞o de entrega 칠: *${novoEndereco}*?\n\nPor favor, responda "sim" para confirmar e finalizar o pedido, ou "n칚o" para digitar novamente.`
        });
        console.log(`[Confirmar Endere칞o] Endere칞o atualizado e solicitando confirma칞칚o final para ${clientName}.`);
      } catch (sendError) {
        console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar 'endere칞o atualizado' para ${clientName}:`, sendError);
      }
      return true;

    } catch (e) {
      console.error(`[Confirmar Endere칞o] ERRO ao atualizar endere칞o para ${clientName}:`, e.response?.data || e.message);
      return await finalizarConversa(mensagens.erros.erroInterno || 'Ocorreu um erro ao atualizar seu endere칞o. Tente novamente mais tarde.');
    }
  }

  // --- L칩gica para a etapa 'aguardando_confirmacao_final_endereco' ---
  if (estado.etapa === 'aguardando_confirmacao_final_endereco') {
    if (texto === 'sim') {
      console.log(`[Confirmar Endere칞o] Confirma칞칚o final de endere칞o por ${clientName}. Enviando pedido.`);
      return await enviarPedido();
    } else if (texto === 'n칚o' || texto === 'nao') {
      estado.etapa = 'aguardando_novo_endereco';
      try {
        await sock.sendMessage(userId, { text: mensagens.pedido.novoEnderecoPergunta || 'Ok. Por favor, digite seu novo endere칞o completo (Rua, N칰mero, Bairro, Cidade, CEP).' });
        console.log(`[Confirmar Endere칞o] Solicitando novo endere칞o ap칩s n칚o confirmar final para ${clientName}.`);
      } catch (sendError) {
        console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar 'novo endere칞o ap칩s n칚o confirmar' para ${clientName}:`, sendError);
      }
      return true;
    } else {
      try {
        await sock.sendMessage(userId, { text: mensagens.pedido.respostaInvalidaEndereco || 'Por favor, responda "sim" ou "n칚o" para confirmar o novo endere칞o.' });
        console.log(`[Confirmar Endere칞o] Resposta inv치lida para confirma칞칚o final de endere칞o de ${clientName}.`);
      } catch (sendError) {
        console.error(`[Confirmar Endere칞o] ERRO CR칈TICO: Falha ao enviar 'resposta inv치lida final' para ${clientName}:`, sendError);
      }
      return true;
    }
  }

  // Se o bot chegar aqui e a etapa for desconhecida, pode ser um fallback ou erro
  console.warn(`[Confirmar Endere칞o] Etapa desconhecida ou n칚o tratada para ${clientName}: ${estado.etapa}. Mensagem: "${texto}"`);
  // Opcional: Enviar uma mensagem de erro ou resetar o fluxo.
  return await finalizarConversa(mensagens.erros.erroInterno || "Desculpe, ocorreu um erro inesperado no fluxo de endere칞o. Por favor, tente novamente digitando /pedir.");
}

module.exports = { handleConfirmarEndereco };
